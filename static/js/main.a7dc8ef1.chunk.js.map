{"version":3,"sources":["components/TodoList/Todo.jsx","redux/todo-reducer.js","components/utils/textarea/Textarea.jsx","components/utils/validate/validate.js","components/TodoList/Task.jsx","components/TodoList/TodoContainer.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["Todo","props","className","done","title","onClick","todoDoneAC","id","deleteTaskAC","initialState","name","list","count","Textarea","input","meta","cols","rows","placeholder","error","touched","requairedFild","value","maxLength","length","maxLengthCreater","ReduxFormHoc","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","TodoContainer","this","addTaskAC","addTask","map","todo","React","Component","connect","state","listId","type","taskId","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","l","pushed","filter","formReducer","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a7dc8ef1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './todo.css'\r\n\r\n\r\nconst Todo =(props)=>{\r\n    \r\n    \r\n    return(\r\n        <div>\r\n           \r\n            <span className=\"task\">\r\n            \r\n\r\n            {!props.done?<div>\r\n                {props.title}\r\n            </div>:<span className=\"finish\">{props.title}</span>}\r\n            \r\n\r\n            <div>\r\n\r\n            {props.done===false?\r\n            <span className=\"button\" onClick={()=>props.todoDoneAC(props.id)}>&#10004;</span>: \r\n            <span className=\"button\" onClick={()=>props.deleteTaskAC(props.id)}>&times;</span>}\r\n            </div>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Todo","\r\nconst initialState ={\r\n    name:\"ToDo List\",\r\n    list:[\r\n        {id:0, title:\"delete me end create yor task\", done:false},\r\n    \r\n        \r\n    ]\r\n}\r\n\r\nlet count =0\r\n\r\nconst DONE = \"DONE\"\r\nconst ADD_TASK =\"ADD_TASK\"\r\nconst DELETE =\"DELETE\"\r\n\r\n\r\n\r\nexport  const todoReducer =(state=initialState, action)=>{\r\n    switch(action.type){\r\n        case DONE:\r\n        return{\r\n            ...state,\r\n            list:state.list.map(l=>{\r\n                if(l.id===action.listId){\r\n                    return{\r\n                        ...l, done:true\r\n                    }\r\n                }\r\n                return l\r\n            })\r\n        }\r\n        case ADD_TASK:{\r\n            const pushed ={title: action.addTask, done:false, id:++count}\r\n            return{\r\n                ...state,\r\n                list:[...state.list, pushed]\r\n            }\r\n        }\r\n        case DELETE:\r\n            return{\r\n                ...state,\r\n                list:state.list.filter(title=>title.id!==action.taskId)\r\n\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const todoDoneAC =(listId)=>({type:DONE, listId})\r\nexport const addTaskAC =(addTask)=>({type:ADD_TASK, addTask})\r\nexport const deleteTaskAC =(taskId)=>({type:DELETE, taskId})\r\n","import React from 'react'\r\nimport './textarea.css'\r\n\r\n\r\n\r\n\r\n\r\nconst Textarea =({input, meta, ...props})=>{\r\n    \r\n    return(\r\n        <div>\r\n           \r\n            <textarea  cols=\"30\" rows=\"3\" \r\n            placeholder=\"create task\"\r\n            {...props}  {...input}/>\r\n            <div className='error'>\r\n            {meta.error&&meta.touched&&meta.error}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Textarea","export const requairedFild =(value)=>{\r\n    if(value) return undefined\r\n    return \"fild is requaired\"\r\n}\r\n\r\nexport const maxLengthCreater =(maxLength)=>(value)=>{\r\n    if(value.length>maxLength)  return `max length is ${maxLength}`\r\n    return undefined\r\n}","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport Textarea from '../utils/textarea/Textarea'\r\nimport { maxLengthCreater, requairedFild } from './../utils/validate/validate'\r\nimport './todo.css'\r\n\r\n\r\nconst maxLength = maxLengthCreater(120)\r\nconst Task =(props)=>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <center>\r\n            <div>\r\n            <Field name=\"addTask\" component={Textarea}  validate={[requairedFild, maxLength]}/>\r\n            </div>\r\n            <button className=\"addBtn\">add new task</button>\r\n            </center>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxFormHoc =reduxForm({form:\"task\"})(Task)\r\n\r\nexport default ReduxFormHoc","import React from 'react'\r\nimport Todo from './Todo'\r\nimport { connect } from 'react-redux'\r\nimport {todoDoneAC, addTaskAC, deleteTaskAC} from '../../redux/todo-reducer'\r\nimport Task from './Task'\r\n\r\nclass TodoContainer extends React.Component{\r\n    render(){\r\n        \r\n        const addTask =(value)=>{\r\n            \r\n            this.props.addTaskAC(value.addTask)\r\n        }\r\n        return(\r\n            <div>\r\n                <center>\r\n                <h1>\r\n            {this.props.name}\r\n            </h1>\r\n                </center>\r\n                <Task onSubmit={addTask}/>\r\n                {this.props.list.map((todo)=><Todo\r\n                 name={this.props.name} id={todo.id}\r\n                  title={todo.title} todoDoneAC={this.props.todoDoneAC}\r\n                  done={todo.done}\r\n                  deleteTaskAC={this.props.deleteTaskAC}\r\n                  />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps =(state)=>{\r\n    return{\r\n        list:state.todo.list,\r\n        name:state.todo.name,\r\n        id:state.todo.id\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{\r\ntodoDoneAC, addTaskAC, deleteTaskAC\r\n})(TodoContainer)","import React  from 'react';\nimport TodoContainer from './components/TodoList/TodoContainer';\n\nconst App =(props)=>{\n  return(\n    <div>\n      <TodoContainer/>\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\r\nimport { todoReducer } from \"./todo-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    todo:todoReducer,\r\n    form:formReducer\r\n})\r\n\r\n\r\nexport const store = createStore(reducers)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n<Provider store ={store}>\n<App />\n</Provider>\n, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}